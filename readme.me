# Payment System

Лёгкий HTTP-сервер на Go, предназначенный для обработки транзакций между кошельками 
с использованием PostgreSQL в качестве базы данных.

##Запуск:
docker-compose up --build

Приложение будет доступно по адресу localhost:8080. 
БД будет доступна по адресу localhost:5433.

Для изменения используемых портов следует модифицировать конфиги из папки configs, 
не забывая про docker-compose.yml
Файл HTTPserver.yaml также содержит секретный ключ для HMAC подписи (знаю, что так делать не надо,
но так как это тестовое задание сделал).

##HMAC подпись
В задании сказано:
"Необходимо разработать приложение, реализующее систему обработки транзакций платёжной системы".
Исходя из этого сделан вывод, что разрабатываемое приложение является
одним сервисом в микросервисной архитектуре, это означает, что запросы,
которые приходят на данный сервер, должны исходить от другого сервера.

Чтобы проверить источник запроса используется HMAC подпись, записанная в
заголовке X-Signature. Подпись вычисляется с использованием алгоритма SHA-256
на основании тела запроса и секретного ключа (который известен этому и клиентскому сервису).

Данная логика реализована в midlleware который применяется только к методу 
POST /api/send (только этот метод изменяет значения в базе данных).
Midlleware проверяет подлиность подписи, повторяя вычисления,
которые совершил клиентский сервис. Если подпись полученная от клиента
совпадает с вычисленной подписью в middleware, то запрос пришел от сервиса
и обрабатывается дальше, в ином случае, возвращается 401.

Таким образом злоумышленник не сможет произвольным образом изменить значение в БД.

Для вашего удобства данная проверка отключена, чтобы её включить нужно сделать 
useAuth равным true в функции main. 

Чтобы получить подпись можно использовать данный код:

package main

import (
	"bufio"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"os"
	"strings"
)

func signBody(secret string, body []byte) string {
	mac := hmac.New(sha256.New, []byte(secret))
	mac.Write(body)
	return hex.EncodeToString(mac.Sum(nil))
}

func main() {
	secret := "secret"
	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print("Enter from: ")
		from, _ := reader.ReadString('\n')
		from = strings.TrimSpace(from)

		fmt.Print("Enter to: ")
		to, _ := reader.ReadString('\n')
		to = strings.TrimSpace(to)

		fmt.Print("Enter amount: ")
		amount, _ := reader.ReadString('\n')
		amount = strings.TrimSpace(amount)

		body := fmt.Sprintf(`{"from":"%s","to":"%s","amount":%s}`, from, to, amount)

		signature := signBody(secret, []byte(body))

		fmt.Println("JSON body:", body)
		fmt.Println("X-Signature:", signature)
		fmt.Println("-----------------------------")
	}
}

Обратите внимание, что, если useAuth равно true, то тело запроса не 
должно не должно содержать пробелов, табуляции и переносов строк, 
чтобы не испортить подпись.
Пример: {"from":"92d962ac5ae2c733e550883baf32012e5747ce8d","to":"ddff98c499af435cb739e7a33b5501e43f731771","amount":15}
(первые кошельки генерируются случайно и данный запрос не сработает (вероятность невероятно мала))
Если проверка подписи отключена, то данное требование не актуально.